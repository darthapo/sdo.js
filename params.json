{"name":"Sdo.js","tagline":"Simple Data Objects. Very simple, intended for use with React and small projects.","body":"# Simple Data Objects\r\n\r\nVery simple data object layer with simple `onChange` callback support.\r\n\r\nYou comprise your data model with just two object types: `Hash`, `List`\r\n\r\n```coffeescript\r\nusers= List(\r\n  Hash( name:'alice', email:'alice@test.com' )\r\n  Hash( name:'bob', email:'bob@test.com' )\r\n)\r\n```\r\n\r\nBoth `Hash` and `List` have an `onChange` method to register for changes.\r\n\r\n```coffeescript\r\nusers.onChange (action, list)->\r\n  console.log \"List changed\", action\r\n```\r\n\r\nFor Lists, the callback receives the action that took place (`add`, `remove`, \r\n`clear`) and the source List instance.\r\n\r\n```coffeescript\r\nHash( test:yes ).onChange (keys, hash)->\r\n  console.log \"Hash changed\", keys\r\n```\r\n\r\nFor Hashes, the callback receives the keys that were changed (always an Array) \r\nand the source Hash instance.\r\n\r\nAll change events propagate upward.\r\n\r\n```coffeescript\r\npage= Hash( current:'home', params:null )\r\n\r\napp= Hash( {page} )\r\n\r\napp.onChange (keys, hash)->\r\n  console.log \"Something changed!\"\r\n\r\npage.set current:'about'\r\n\r\n# app.onChange handler is called!\r\n```\r\n\r\nThe `Store` type is for syncing objects to `localStorage` (or `sessionStorage`).\r\n\r\n\r\n```coffeescript\r\nstore= Store('app.settings')\r\nsettings= Hash( store.load(\r\n  font: 'Helvetica' # Default values are returned if no data was found in storage\r\n))\r\n\r\nsettings.onChange( store.save )\r\n\r\nsettings.set font:'Comic Sans' # Ack! But automatically persisted\r\n```\r\n\r\nYou can nest objects and selectively store at certain levels, if you want:\r\n\r\n```coffeescript\r\nclass App\r\n  constructor: ->\r\n    store= Store( 'app.settings' )\r\n    @state= Hash(\r\n      page: Hash( current:'home', params:null )\r\n      settings: Hash(store.load( font:'Helvetica' ))\r\n      other: 'Whatever'\r\n    )\r\n    @state.get('settings').onChange(store.save)\r\n\r\napp= new App\r\n```\r\n\r\nOnly `app.state.settings` will be persisted in the `app.state` graph.\r\n\r\nI use this with small React projects:\r\n\r\n```coffeescript\r\n{div}= React.DOM\r\n_= null\r\n\r\nstate= Hash( \r\n  name:'Matt' \r\n  todos: List([\r\n    Hash( title:'A todo', done:no )\r\n    Hash( title:'Another todo', done:no )\r\n  ])\r\n)\r\n\r\nPage= React.createClass\r\n  render: ->\r\n    (div _,\r\n      \"Welcome, #{ @props.name }\"\r\n    )\r\n\r\nstate.onChange ->\r\n  React.renderComponent (Page state.get()), document.body\r\n\r\n@onload= ->\r\n  state.set loaded:yes\r\n```\r\n\r\nOh yes, calling `get()` with no parameters will return a JSON-like structure,\r\nvery useful for splatting into React props as shown above.\r\n\r\n[Run unit tests in your browser...](http://darthapo.github.io/sdo.js/test/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}