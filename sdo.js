// Generated by CoffeeScript 1.6.3
(function() {
  var Hash, List, OnChange, setObject, setPair, type, uid, _global, _slice, _toString,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _global = this;

  _slice = Array.prototype.slice;

  _toString = Object.prototype.toString;

  type = (function() {
    var classToType, elemParser, name, _i, _len, _ref;
    elemParser = /\[object HTML(.*)\]/;
    classToType = {};
    _ref = "Array Boolean Date Function NodeList Null Number RegExp String Undefined ".split(" ");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var found, strType;
      strType = _toString.call(obj);
      if (found = classToType[strType]) {
        return found;
      } else if (found = strType.match(elemParser)) {
        return found[1].toLowerCase();
      } else {
        return "object";
      }
    };
  })();

  uid = (function() {
    var last, radix;
    last = 0;
    radix = 36;
    return function() {
      var now;
      now = (new Date).getTime();
      while (now <= last) {
        now += 1;
      }
      last = now;
      return now.toString(radix);
    };
  })();

  OnChange = (function() {
    function OnChange() {
      this._notifyChange = __bind(this._notifyChange, this);
    }

    OnChange.prototype.onChange = function(fn, remove) {
      var cb;
      if (this._listeners == null) {
        this._listeners = [];
      }
      if (remove) {
        return this._listeners = (function() {
          var _i, _len, _ref, _results;
          _ref = this._listeners;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cb = _ref[_i];
            if (cb !== fn) {
              _results.push(cb);
            }
          }
          return _results;
        }).call(this);
      } else {
        if (__indexOf.call(this._listeners, fn) < 0) {
          return this._listeners.push(fn);
        }
      }
    };

    OnChange.prototype._notifyChange = function(data) {
      var callback, _i, _len, _ref, _results;
      if (!(this._listeners && this._listeners.length > 0)) {
        return null;
      }
      _ref = this._listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(data, this));
      }
      return _results;
    };

    return OnChange;

  })();

  (function(root) {
    root.uid = uid;
    return root.type = type;
  })((typeof module !== "undefined" && module !== null ? module.exports : void 0) || this);

  Hash = (function(_super) {
    __extends(Hash, _super);

    function Hash(source, callback) {
      if (this === _global) {
        return new Hash(source, callback);
      }
      Hash.__super__.constructor.apply(this, arguments);
      this._atts = {};
      if (source) {
        this.set(source);
      }
      if (callback) {
        this.onChange(callback);
      }
    }

    Hash.prototype.set = function(key, value, _silent) {
      if (arguments.length === 2) {
        return setPair(this._atts, key, value, _silent, this._notifyChange);
      } else {
        return setObject(this._atts, key, _silent, this._notifyChange);
      }
    };

    Hash.prototype.get = function(key) {
      var atts, value, _ref;
      if (arguments.length === 1) {
        return this._atts[key];
      } else {
        atts = {};
        _ref = this._atts;
        for (key in _ref) {
          value = _ref[key];
          atts[key] = (value != null ? typeof value.get === "function" ? value.get() : void 0 : void 0) || value;
        }
        return atts;
      }
    };

    return Hash;

  })(OnChange);

  setPair = function(atts, key, value, _silent, _changed) {
    var oldValue;
    if (value !== atts[key]) {
      oldValue = atts[key];
      if (oldValue != null) {
        if (typeof oldValue.onChange === "function") {
          oldValue.onChange(_changed, false);
        }
      }
      atts[key] = value;
      if (!_silent) {
        _changed([key]);
      }
      if (value != null) {
        if (typeof value.onChange === "function") {
          value.onChange(_changed);
        }
      }
      return true;
    } else {
      return false;
    }
  };

  setObject = function(atts, hash, _silent, _changed) {
    var key, keys, value;
    keys = [];
    for (key in hash) {
      if (!__hasProp.call(hash, key)) continue;
      value = hash[key];
      if (setPair(atts, key, value, true, _changed)) {
        keys.push(key);
      }
    }
    if (keys.length > 0) {
      if (!_silent) {
        _changed(keys);
      }
      return true;
    } else {
      return false;
    }
  };

  (function(root) {
    return root.Hash = Hash;
  })((typeof module !== "undefined" && module !== null ? module.exports : void 0) || this);

  List = (function(_super) {
    __extends(List, _super);

    function List(source, callback) {
      if (this === _global) {
        return new List(source, callback);
      }
      this._list = [];
      this.length = 0;
      if (source) {
        this.addAll(source);
      }
      if (callback) {
        this.onChange(callback);
      }
    }

    List.prototype.add = function(value, _silent) {
      this._list.push(value);
      if (value != null) {
        if (typeof value.onChange === "function") {
          value.onChange(this._notifyChange);
        }
      }
      this.length = this._list.length;
      if (!_silent) {
        this._notifyChange('add');
      }
      return this;
    };

    List.prototype.addAll = function(values, _silent) {
      var value, _i, _len;
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        this.add(value, _silent);
      }
      return this;
    };

    List.prototype.remove = function(value, _silent) {
      var val;
      this._list = (function() {
        var _i, _len, _ref, _results;
        _ref = this._list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          if (val !== value) {
            _results.push(val);
          }
        }
        return _results;
      }).call(this);
      if (value != null) {
        if (typeof value.onChange === "function") {
          value.onChange(this._notifyChange, true);
        }
      }
      this.length = this._list.length;
      if (!_silent) {
        this._notifyChange('remove');
      }
      return this;
    };

    List.prototype.get = function(index) {
      var val, _i, _len, _ref, _results;
      if (arguments.length === 0) {
        _ref = this._list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          _results.push((val != null ? typeof val.get === "function" ? val.get() : void 0 : void 0) || val);
        }
        return _results;
      } else {
        return this._list[index];
      }
    };

    List.prototype.items = function() {
      return this._list;
    };

    List.prototype.clear = function(_silent) {
      var value, _i, _len, _ref;
      _ref = this._list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        this.remove(value, true);
      }
      if (!_silent) {
        this._notifyChange('clear');
      }
      return this;
    };

    return List;

  })(OnChange);

  (function(root) {
    return root.List = List;
  })((typeof module !== "undefined" && module !== null ? module.exports : void 0) || this);

}).call(this);
