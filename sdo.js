// Generated by CoffeeScript 1.6.3
(function() {
  var Hash, HashImpl, List, ListImpl, OnChangeImpl, extend, type, uid, _slice, _toString,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  _slice = Array.prototype.slice;

  _toString = Object.prototype.toString;

  Object.create || (Object.create = (function() {
    var F;
    F = function() {};
    return function(o) {
      F.prototype = o;
      return new F();
    };
  })());

  type = (function() {
    var classToType, elemParser, name, _i, _len, _ref;
    elemParser = /\[object HTML(.*)\]/;
    classToType = {};
    _ref = "Array Boolean Date Function NodeList Null Number RegExp String Undefined ".split(" ");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var found, strType;
      strType = _toString.call(obj);
      if (found = classToType[strType]) {
        return found;
      } else if (found = strType.match(elemParser)) {
        return found[1].toLowerCase();
      } else {
        return "object";
      }
    };
  })();

  extend = function(obj) {
    var key, source, value, _i, _len, _ref;
    _ref = _slice.call(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source) {
        for (key in source) {
          value = source[key];
          obj[key] = value;
        }
      }
    }
    return obj;
  };

  uid = function(radix) {
    var now;
    if (radix == null) {
      radix = 36;
    }
    now = (new Date).getTime();
    while (now <= uid._prev || 0) {
      now += 1;
    }
    uid._prev = now;
    return now.toString(radix);
  };

  OnChangeImpl = {
    onChange: function(cb, listen) {
      var fn;
      if (listen == null) {
        listen = true;
      }
      this._listeners || (this._listeners = []);
      if (listen) {
        if (__indexOf.call(this._listeners, cb) < 0) {
          this._listeners.push(cb);
        }
      } else {
        this._listeners = (function() {
          var _i, _len, _ref, _results;
          _ref = this._listeners;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            fn = _ref[_i];
            if (fn !== cb) {
              _results.push(fn);
            }
          }
          return _results;
        }).call(this);
      }
      return this;
    },
    _changed: function() {
      var callback, params, _i, _len, _ref;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!((this._listeners != null) && this._listeners.length > 0)) {
        return this;
      }
      _ref = this._listeners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.apply(null, params);
      }
      return this;
    }
  };

  HashImpl = extend({}, OnChangeImpl, {
    type: 'hash',
    isHash: true,
    isList: false,
    setPair: function(key, value, _silent) {
      var oldValue;
      if (value !== this._atts[key]) {
        oldValue = this._atts[key];
        if (oldValue != null) {
          if (typeof oldValue.onChange === "function") {
            oldValue.onChange(this._changed, false);
          }
        }
        this._atts[key] = value;
        if (!_silent) {
          this._changed([key], this);
        }
        if (value != null) {
          if (typeof value.onChange === "function") {
            value.onChange(this._changed);
          }
        }
        return true;
      } else {
        return false;
      }
    },
    set: function(keyOrValues, value, _silent) {
      var k, keys, v;
      if (type(keyOrValues) === 'string') {
        return this.setPair(keyOrValues, value, _silent);
      } else {
        keys = [];
        for (k in keyOrValues) {
          if (!__hasProp.call(keyOrValues, k)) continue;
          v = keyOrValues[k];
          if (this.setPair(k, v, true)) {
            keys.push(k);
          }
        }
        if (keys.length > 0) {
          if (!_silent) {
            this._changed(keys, this);
          }
          return true;
        } else {
          return false;
        }
      }
    },
    get: function(key) {
      var atts, value, _ref;
      if (arguments.length === 0) {
        atts = {};
        _ref = this._atts;
        for (key in _ref) {
          value = _ref[key];
          atts[key] = (value != null ? typeof value.get === "function" ? value.get() : void 0 : void 0) || value;
        }
        return atts;
      } else {
        return this._atts[key];
      }
    },
    remove: function(key, _silent) {
      var val;
      if (_hasOwn.call(this._atts, key)) {
        val = this._atts[key];
        if (typeof val.onChange === "function") {
          val.onChange(this._changed, false);
        }
        delete this._atts[key];
        if (!_silent) {
          this._changed([key], this);
        }
        return val;
      } else {
        return null;
      }
    },
    toString: function() {
      return "[object Hash]";
    }
  });

  Hash = function(base, callback) {
    var hash;
    if (base == null) {
      base = {};
    }
    hash = Object.create(HashImpl);
    hash._atts = {};
    hash.set(base, null, true);
    if (callback != null) {
      hash.onChange(callback);
    }
    hash._changed = hash._changed.bind(hash);
    return hash;
  };

  ListImpl = extend({}, OnChangeImpl, {
    type: 'list',
    isHash: false,
    isList: true,
    add: function(value, _silent) {
      if (__indexOf.call(this._list, value) < 0) {
        this._list.push(value);
        if (value != null) {
          if (typeof value.onChange === "function") {
            value.onChange(this._changed);
          }
        }
        this.length = this._list.length;
        if (!_silent) {
          this._changed('add', this, value);
        }
      }
      return this;
    },
    addAll: function(values, _silent) {
      var value, _i, _len;
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        this.add(value, _silent);
      }
      return this;
    },
    remove: function(value, _silent) {
      var val;
      this._list = (function() {
        var _i, _len, _ref, _results;
        _ref = this._list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          if (val !== value) {
            _results.push(val);
          }
        }
        return _results;
      }).call(this);
      if (value != null) {
        if (typeof value.onChange === "function") {
          value.onChange(this._changed, true);
        }
      }
      this.length = this._list.length;
      if (!_silent) {
        this._changed('remove', this, value);
      }
      return this;
    },
    get: function(index) {
      var val, _i, _len, _ref, _results;
      if (arguments.length === 0) {
        _ref = this._list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          val = _ref[_i];
          _results.push((val != null ? typeof val.get === "function" ? val.get() : void 0 : void 0) || val);
        }
        return _results;
      } else {
        return this._list[index];
      }
    },
    items: function() {
      return this._list;
    },
    toString: function() {
      return "[object List]";
    }
  });

  List = function(base, callback) {
    var list;
    if (base == null) {
      base = [];
    }
    list = Object.create(ListImpl);
    list._list = [];
    list.addAll(base, true);
    if (callback != null) {
      list.onChange(callback);
    }
    list._changed = list._changed.bind(list);
    return list;
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports.Hash = Hash;
    module.exports.List = List;
    module.exports.type = type;
    module.exports.uid = uid;
  } else {
    this.Hash = Hash;
    this.List = List;
    this.type = type;
    this.uid = uid;
  }

}).call(this);
