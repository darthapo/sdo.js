/* v0.2.0 */
// Generated by CoffeeScript 1.6.3
(function() {
  var Graph, Hash, List, api, arrayWithout, clone, defaults, extend, hasKey, isBlank, makeArray, resultFor, type, uid, _Evented, _slice, _toString,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _slice = Array.prototype.slice;

  _toString = Object.prototype.toString;

  type = (function() {
    var classToType, elemParser, name, _i, _len, _ref;
    elemParser = /\[object HTML(.*)\]/;
    classToType = {};
    _ref = "Boolean Number String Function Array Date RegExp Undefined Null NodeList".split(" ");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var found, strType;
      strType = _toString.call(obj);
      if (found = classToType[strType]) {
        return found;
      } else if (found = strType.match(elemParser)) {
        return found[1].toLowerCase();
      } else {
        return "object";
      }
    };
  })();

  defaults = function(obj) {
    var key, source, value, _i, _len, _ref;
    _ref = _slice.call(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source) {
        for (key in source) {
          value = source[key];
          if (obj[key] == null) {
            obj[key] = value;
          }
        }
      }
    }
    return obj;
  };

  extend = function(obj) {
    var key, source, value, _i, _len, _ref;
    _ref = _slice.call(arguments, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source) {
        for (key in source) {
          value = source[key];
          obj[key] = value;
        }
      }
    }
    return obj;
  };

  clone = function(obj) {
    return extend({}, obj);
  };

  makeArray = function(args) {
    return _slice.call(args, 0);
  };

  arrayWithout = function(source, target) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = source.length; _i < _len; _i++) {
      item = source[_i];
      if (item(!target)) {
        _results.push(item);
      }
    }
    return _results;
  };

  isBlank = function(value) {
    var key;
    if (!value) {
      return true;
    }
    for (key in value) {
      return false;
    }
    return true;
  };

  hasKey = function(obj, key) {
    return (key in obj);
  };

  resultFor = function(obj, key) {
    var prop;
    if (hasKey(obj, key)) {
      prop = obj[key];
      return (typeof prop === "function" ? prop() : void 0) || prop;
    } else {
      return void 0;
    }
  };

  uid = function(radix) {
    var now;
    if (radix == null) {
      radix = 36;
    }
    now = (new Date).getTime();
    while (now <= uid._lastTimestamp || 0) {
      now += 1;
    }
    uid._lastTimestamp = now;
    return now.toString(radix);
  };

  _Evented = (function() {
    function _Evented(callback) {
      this._changed = __bind(this._changed, this);
      this._callbacks = [];
      if (callback != null) {
        this.onChange(callback);
      }
    }

    _Evented.prototype.onChange = function(callback, remove) {
      if (remove == null) {
        remove = false;
      }
      if (remove) {
        this._callbacks = arrayWithout(this._callbacks, callback);
      } else {
        this._callbacks.push(callback);
      }
      return this;
    };

    _Evented.prototype._changed = function() {
      var callback, params, _i, _len, _ref;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this._callbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback.apply(null, params);
      }
      return this;
    };

    return _Evented;

  })();

  Hash = (function(_super) {
    __extends(Hash, _super);

    function Hash(atts, callback) {
      if (type(atts) === 'function') {
        callback = atts;
        atts = {};
      }
      atts || (atts = {});
      Hash.__super__.constructor.call(this, callback);
      defaults = resultFor(this, 'defaults') || {};
      this.atts = extend({}, atts, defaults);
    }

    Hash.prototype.setPair = function(key, value, _silent) {
      if (value !== this.atts[key]) {
        this.atts[key] = value;
        if (!_silent) {
          this._changed([key]);
        }
        return true;
      } else {
        return false;
      }
    };

    Hash.prototype.set = function(keyOrValues, value) {
      var k, keys, v;
      if (type(keyOrValues) === 'string') {
        return this.setPair(keyOrValues, value);
      } else {
        keys = [];
        for (k in keyOrValues) {
          if (!__hasProp.call(keyOrValues, k)) continue;
          v = keyOrValues[k];
          if (this.setPair(k, v, true)) {
            keys.push(k);
          }
        }
        if (keys.length > 0) {
          this._changed(keys);
          return true;
        } else {
          return false;
        }
      }
    };

    Hash.prototype.get = function(key) {
      if (arguments.length === 0) {
        return this.atts;
      } else {
        return this.atts[key];
      }
    };

    Hash.prototype.toProps = function() {
      return this.atts;
    };

    return Hash;

  })(_Evented);

  List = (function(_super) {
    __extends(List, _super);

    function List(callback) {
      List.__super__.constructor.call(this, callback);
      this._list = [];
      this._comparator = null;
    }

    List.prototype.create = function(atts) {
      var model;
      if (atts == null) {
        atts = {};
      }
      if (this.ItemClass != null) {
        model = new this.ItemClass(atts);
        this.add(model);
        return model;
      } else {
        throw new Error("To create items you must specify a ItemClass property.");
      }
    };

    List.prototype.add = function(model) {
      this._list.push(model);
      model.onChange(this._changed);
      return this;
    };

    List.prototype.remove = function(model) {
      this._list = arrayWithout(this._list, model);
      model.onChange(this._changed, true);
      return this;
    };

    List.prototype.get = function(index) {
      if (arguments.length === 0) {
        return this._list;
      } else {
        return this._list[index];
      }
    };

    List.prototype.toProps = function() {
      var model, _i, _len, _ref, _results;
      _ref = this._list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        _results.push(model.toProps());
      }
      return _results;
    };

    return List;

  })(_Evented);

  Graph = (function(_super) {
    __extends(Graph, _super);

    function Graph(models, callback) {
      var key, model;
      Graph.__super__.constructor.call(this, callback);
      this._keys = [];
      if (models != null) {
        for (key in models) {
          if (!__hasProp.call(models, key)) continue;
          model = models[key];
          this.add(key, model);
        }
      }
    }

    Graph.prototype.add = function(key, model) {
      if (type(model) === 'function') {
        model = new model();
      }
      this[key] = model;
      this._keys.push(key);
      model.onChange(this._changed);
      return this;
    };

    Graph.prototype.remove = function(key) {
      var model;
      model = this[key];
      if (model != null) {
        model.onChange(this._changed, true);
        delete this[key];
        this._keys = arrayWithout(this._keys, key);
        return model;
      } else {
        return null;
      }
    };

    Graph.prototype.set = function(name, key, value) {
      return this[name].set(key, value);
    };

    Graph.prototype.get = function(name, key) {
      return this[name].get(key);
    };

    Graph.prototype.toProps = function() {
      var data, key, _i, _len, _ref;
      data = {};
      _ref = this._keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        data[key] = this[key].toProps();
      }
      return data;
    };

    return Graph;

  })(_Evented);

  api = {
    uid: uid,
    type: type,
    extend: extend,
    defaults: defaults,
    Hash: Hash,
    List: List,
    Graph: Graph
  };

  if (typeof module !== "undefined" && module !== null) {
    if (typeof module !== "undefined" && module !== null) {
      module.exports = api;
    }
  } else {
    this.SDO = api;
  }

}).call(this);
